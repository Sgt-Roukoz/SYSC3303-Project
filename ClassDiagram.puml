@startuml
'https://plantuml.com/class-diagram

class Main.Elevator
class Main.ElevatorEvent
class Main.EventQueue
class Main.Floor
class Main.Main
class Main.Scheduler
class Main.Idle
class Main.MovingToFloor
class Main.MovingToDestination
class Main.Loading
class Main.Unloading
enum Main.ELEVATOR_BUTTON <<enumeration>>
exception InterruptedException <<exception>>
interface Runnable <<interface>>
interface Main.ElevatorState <<interface>>

Main.Scheduler *-- Main.EventQueue
Main.Elevator *-- Main.EventQueue
Main.Floor *-- Main.EventQueue

InterruptedException <|.. Main.Elevator

Main.ELEVATOR_BUTTON <|.. Main.ElevatorEvent
Main.ELEVATOR_BUTTON <|.. Main.Floor

interface Main.ElevatorState {
entry(context:Main.Elevator): void
floorRequest(context:Main.Elevator): void
arrivedAtFloor(context:Main.Elevator): void
destinationRequest(context:Main.Elevator): void
arrivedAtDestination(context:Main.Elevator): void
doorsClosed(context:Main.Elevator): void
displayState(): void
toString(): String
}

class Main.Idle implements Main.ElevatorState {
}

class Main.MovingToFloor implements Main.ElevatorState {
}

class Main.MovingToDestination implements Main.ElevatorState {
}

class Main.Loading implements Main.ElevatorState {
}

class Main.Unloading implements Main.ElevatorState {
}

class Main.Elevator implements Runnable {
-{static} TIME_PER_FLOOR: long {readOnly}
-{static} DOOR_OPERATION_TIME: long {readOnly}
-currentFloor: int
-elevatorId: int {readOnly}
-eventQueue: Main.EventQueue {readOnly}
-currentEvent: Main.ElevatorEvent
-doorsOpen: boolean
-states: Map<String, Main.ElevatorState> {readOnly}
-currentState: Main.ElevatorState

+Main.Elevator(eventQueue: Main.EventQueue, elevatorId: int)
+run(): void
+getElevatorId(): int
+floorRequested(): void
+arrivedAtFloor(): void
+destinationRequest(): void
+arrivedAtDestination(): void
+doorsClosed(): void
+setCurrentState(nextState: String): void
+getCurrentEvent(): Main.ElevatorEvent
-processEvent(event: Main.ElevatorEvent): void
-moveToFloor(floor: int) throws InterruptedException : void
-notifySchedulerOfArrival(): void
-openDoors() throws InterruptedException: void
-closeDoors() throws InterruptedException : void
}

enum Main.ELEVATOR_BUTTON {
UP
DOWN
INSIDE
START_MOVE
ARRIVAL
}

class Main.ElevatorEvent{
-time: String {readOnly}
-floor: int {readOnly}
-button: Main.ELEVATOR_BUTTON {readOnly}
-car_button: int{readOnly}

+Main.ElevatorEvent(time: String, floor: int, button: Main.ELEVATOR_BUTTON, car_button: int)
+toString(): String
+getTime(): String
+getFloor(): int
+getButton(): Main.ELEVATOR_BUTTON
+getCar_button(): int
}

class Main.EventQueue{
-floorRequest:ArrayDeque<Main.ElevatorEvent> {readOnly}
-elevatorRequest: ArrayDeque<Main.ElevatorEvent> {readOnly}
+processedEvents: int
+maxEvents: int
-maxQueue: int {readOnly}

+Main.EventQueue()
-mutex(): void
+synchronized getFloorRequest(): Main.ElevatorEvent
+synchronized setFloorRequest(event: Main.ElevatorEvent): void
+synchronized setElevatorRequest(event: Main.ElevatorEvent): void
+synchronized getElevatorRequest(): Main.ElevatorEvent
+synchronized elevatorArrived(): void
}

class Main.Floor extends Thread{
upLampOn: boolean
downLampOn: boolean
elevatorArrived: boolean
-eventQueue:Main.EventQueue {readOnly}

+Main.Floor(name: String, eventQueue: Main.EventQueue)
+processFile(file: File): void
+processInput(input: String): void
+run(): void
}

class Main.Main{
+{Static} main(args:String[]): void
}

class Main.Scheduler implements Runnable{

-schedulerState: Enum
-state: SchedulerState
-eventQueue:Main.EventQueue {readOnly}
-floorRequestToBeProcessed: Main.ElevatorEvent
-processedRequest:Main.ElevatorEvent

+Main.Scheduler(eventQueue: Main.EventQueue)
+run():void
-readFloorRequest(): void
-processFloorRequest(): void
-sendElevatorRequest(): void

}

@enduml