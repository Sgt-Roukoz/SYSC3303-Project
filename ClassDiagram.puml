@startuml
'https://plantuml.com/class-diagram

class Elevator
class ElevatorEvent
class EventQueue
class Floor
class Main
class Scheduler
class Idle
class MovingToFloor
class MovingToDestination
class Loading
class Unloading
enum ELEVATOR_BUTTON <<enumeration>>
exception InterruptedException <<exception>>
interface Runnable <<interface>>
interface ElevatorState <<interface>>

Scheduler *-- EventQueue
Elevator *-- EventQueue
Floor *-- EventQueue

InterruptedException <|.. Elevator

ELEVATOR_BUTTON <|.. ElevatorEvent
ELEVATOR_BUTTON <|.. Floor

interface ElevatorState {
entry(context:Elevator): void
floorRequest(context:Elevator): void
arrivedAtFloor(context:Elevator): void
destinationRequest(context:Elevator): void
arrivedAtDestination(context:Elevator): void
doorsClosed(context:Elevator): void
displayState(): void
}

class Elevator implements Runnable {
-{static} TIME_PER_FLOOR: long {readOnly}
-{static} DOOR_OPERATION_TIME: long {readOnly}
-currentFloor: int
-elevatorId: int {readOnly}
-eventQueue: EventQueue {readOnly}
-doorsOpen: boolean

+Elevator(eventQueue: EventQueue, elevatorId: int)
+run(): void
-processEvent(event: ElevatorEvent): void
-moveToFloor(floor: int) throws InterruptedException : void
-notifySchedulerOfArrival(): void
-openDoors() throws InterruptedException: void
-closeDoors() throws InterruptedException : void
}

enum ELEVATOR_BUTTON {
UP
DOWN
INSIDE
START_MOVE
ARRIVAL
}

class ElevatorEvent{
-time: String {readOnly}
-floor: int {readOnly}
-button: ELEVATOR_BUTTON {readOnly}
-car_button: int{readOnly}

+ElevatorEvent(time: String, floor: int, button: ELEVATOR_BUTTON, car_button: int)
+toString(): String
+getTime(): String
+getFloor(): int
+getButton(): ELEVATOR_BUTTON
+getCar_button(): int
}

class EventQueue{
-floorRequest:ArrayDeque<ElevatorEvent> {readOnly}
-elevatorRequest: ArrayDeque<ElevatorEvent> {readOnly}
+processedEvents: int
+maxEvents: int
-maxQueue: int {readOnly}

+EventQueue()
-mutex(): void
+synchronized getFloorRequest(): ElevatorEvent
+synchronized setFloorRequest(event: ElevatorEvent): void
+synchronized setElevatorRequest(event: ElevatorEvent): void
+synchronized getElevatorRequest(): ElevatorEvent
+synchronized elevatorArrived(): void
}

class Floor extends Thread{
upLampOn: boolean
downLampOn: boolean
elevatorArrived: boolean
-eventQueue:EventQueue {readOnly}

+Floor(name: String, eventQueue: EventQueue)
+processFile(file: File): void
+processInput(input: String): void
+run(): void
}

class Main{
+{Static} main(args:String[]): void
}

class Scheduler implements Runnable{

-schedulerState: Enum
-state: SchedulerState
-eventQueue:EventQueue {readOnly}
-floorRequestToBeProcessed: ElevatorEvent
-processedRequest:ElevatorEvent

+Scheduler(eventQueue: EventQueue)
+run():void
-readFloorRequest(): void
-processFloorRequest(): void
-sendElevatorRequest(): void

}

@enduml