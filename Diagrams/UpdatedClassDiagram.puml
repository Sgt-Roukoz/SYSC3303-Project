@startuml
'https://plantuml.com/class-diagram

class Elevator
class ElevatorEvent
class Floor
class Scheduler
class SchedulerReceiver
class SchedulerStore
class Idle
class Moving
class LoadingUnloading
enum ELEVATOR_BUTTON <<enumeration>>
exception InterruptedException <<exception>>
interface Runnable <<interface>>
interface ElevatorState <<interface>>
interface SchedulerStoreInt <<interface>>

InterruptedException <|.. Elevator

ELEVATOR_BUTTON <|.. ElevatorEvent
ELEVATOR_BUTTON <|.. Floor

interface ElevatorState {
entry(context:Elevator): void
floorRequest(context:Elevator): void
arrivedAtFloor(context:Elevator): void
doorsClosed(context:Elevator): void
displayState(): void
toString(): String
}

interface SchedulerStoreInt{
addElevator(elevId: Integer): void
getElevators(): Map<Integer, ArrayList<Serializable>>
updateElevator(elevID: Integer, itemToEdit: int, value: Serializable): void
findClosest(floor: ElevatorEvent): int
getFloorRequest(): ElevatorEvent
setFloorRequest(event: ElevatorEvent): void
}

class SchedulerStore implements SchedulerStoreInt {

}

class Idle implements ElevatorState {
}

class Moving implements ElevatorState {
}

class LoadingUnloading implements ElevatorState {
}

class Elevator implements Runnable {
-{static} TIME_PER_FLOOR: long {readOnly}
#{static} DOOR_OPERATION_TIME: long {readOnly}
-{static} ACK_LOOP_WAIT_TIME: long {readOnly}
-currentFloor: int
-elevatorId: int {readOnly}
-doorsOpen: boolean
-states: Map<String, ElevatorState> {readOnly}
-currentState: ElevatorState
-{static} serverPort: int {readOnly}
-sendReceiveSocket: DatagramSocket
-acknowledged: boolean
-MAX_ATTEMPTS: int {readOnly}
-direction: String
-destinationFloor: int
#transientFault: boolean
#hardFault: boolean

+Elevator(elevatorId: int)
+floorRequested(): void
+arrivedAtFloor(): void
+doorsClosed(): void
+getCurrentFloor(): int
+getDestinationFloor(): int
+getElevatorId(): int
+setCurrentState(nextState: String): void
-sendIExistMessage(): void
#waitMessageScheduler(): void
#packetSentGetAck(message: String): void
#sendIdleStatusUpdate(): void
#sendMovingStatusUpdate(): void
+run(): void
#moveToFloor(floor: int) throws InterruptedException : void
#checkForIncomingMessages(): void
-checkFaultType(msg: String): void
#openDoors() throws InterruptedException: void
#closeDoors() throws InterruptedException : void
+setOpenDoors(): void
+setCloseDoors(): void
+getDoorBoolean(): boolean
+getCurrentState(): String
+{Static} main(args:String[]): void
}

enum ELEVATOR_BUTTON {
UP
DOWN
INSIDE
START_MOVE
ARRIVAL
}

class ElevatorEvent{
-time: String {readOnly}
-sourceFloor: int {readOnly}
-destFloor: int {readOnly}
-button: ELEVATOR_BUTTON {readOnly}
-car_button: int{readOnly}

+ElevatorEvent(time: String, floor: int, button: ELEVATOR_BUTTON, car_button: int)
+toString(): String
+getTime(): String
+getSourceFloor(): int
+getDestFloor(): int
+getButton(): ELEVATOR_BUTTON
+getCar_button(): int
}

class Floor extends Thread{
upLampOn: boolean
downLampOn: boolean
elevatorArrived: boolean
-eventQueue:EventQueue {readOnly}

+Floor(name: String, eventQueue: EventQueue)
+processFile(file: File): void
+processInput(input: String): void
+run(): void
}

class Scheduler implements Runnable{

-sendReceiveSocket: DatagramSocket
-floorRequestToBeProcessed: ElevatorEvent
-processedRequest:ElevatorEvent
-store: SchedulerStoreInt
-sourceFloors: Map<Integer, LinkedList<Integer>>
-destFloors: Map<Integer, LinkedList<Integer>>
-lastKnownDirection: Map<Integer, String>
-srcDestPairs: Map<Integer, Map<Integer, Integer>>
-srcErrorPairs: Map<Integer, Map<Integer, Integer>>

+Scheduler(store: SchedulerStoreInt)
+run():void
-removeOutOfOrderElevators() throws RemoteException : void
-readFloorRequest() throws RemoteException: void
-checkArrivedAtAnyFloor() throws RemoteException, InterruptedException: void
-contains(list: LinkedList<Integer>, value: Integer): boolean
-createMessage(elevId: int, floor: int, fault: int) throws RemoteException: String
-sendCommand(elevId: int, floor: int, fault: int): void
-findNextClosest(floor: int, destfloors: LinkedList<Integer>, srcFloors: LinkedList<Integer>, direction: String): int
-sendToClosest(elevId: Integer): void
-findClosest(sourceFloor: int, destFloor: int, fault: int): void
+setReadFloorRequest(): void
+setProcessFloorRequest(): void
+getFloorRequestToBeProcessed(): ElevatorEvent
+getProcessedRequest(): ElevatorEvent
+{Static} main(args:String[]): void
}

class SchedulerReceiver implements Runnable{

-store: SchedulerStoreInt
-port: int {readOnly}

+SchedulerReceiver(store: SchedulerStoreInt)
+run(): void
+{Static} main(args:String[]): void
}

@enduml