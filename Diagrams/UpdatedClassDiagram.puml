@startuml
'https://plantuml.com/class-diagram

class CellPanel
class CustomCellRenderer
class Elevator
class ElevatorEvent
class ElevatorInspector
class Floor
class HelperFunctions
class Idle
class LoadingUnloading
class Moving
class Scheduler
class SchedulerReceiver
class SchedulerStore
class SplitTableCellRenderer
enum ELEVATOR_BUTTON <<enumeration>>
exception InterruptedException <<exception>>
interface ElevatorState <<interface>>
interface Runnable <<interface>>
interface SchedulerStoreInt <<interface>>

InterruptedException <|.. Elevator

ELEVATOR_BUTTON <|.. ElevatorEvent
ELEVATOR_BUTTON <|.. Floor

interface ElevatorState {
entry(context:Elevator): void
floorRequest(context:Elevator): void
arrivedAtFloor(context:Elevator): void
doorsClosed(context:Elevator): void
displayState(): void
toString(): String
}

interface SchedulerStoreInt{
addElevator(elevId: Integer, address: InetAddress, port: Integer) throws RemoteException: void
getElevators() throws RemoteException: Map<Integer, ArrayList<Serializable>>
updateElevator(elevID: Integer, itemToEdit: int, value: Serializable) throws RemoteException: void
getFloorRequest() throws RemoteException: ElevatorEvent
setFloorRequest(event: ElevatorEvent) throws RemoteException: void
removeElevator(id: int) throws RemoteException: void
getPassengerCounts() throws RemoteException: addLog(String message) throws RemoteException: void
receiveLog() throws RemoteException: String
setPassengersServiced(requests: int) throws RemoteException: void
setMovesDone(requests: int) throws RemoteException: void
setFirstRequest(time: String) throws RemoteException: void
setLastRequest(time: String) throws RemoteException: void
getPassengersServiced() throws RemoteException: int
getMovesDone() throws RemoteException: int
getFirstRequest() throws RemoteException: String
getLastRequest() throws RemoteException: String
}

class SchedulerStore extends UnicastRemoteObject implements SchedulerStoreInt {
-floorRequests: ArrayDeque<ElevatorEvent>
-elevators: Map<Integer, ArrayList<Serializable>>
-messageLog: ArrayDeque<String>
-passengersServiced: int
-totalMoves: int
-firstRequestStamp: String
-lastRequestStamp: String
+SchedulerStore() throws RemoteException
+(synchronized) addElevator (elevID: Integer, address: InetAddress, port: Integer): void
+(synchronized) Map<Integer, ArrayList<Serializable>> getElevators()
+(synchronized) void updateElevator(Integer elevID, int itemToEdit, Serializable value)
+(synchronized) ElevatorEvent getFloorRequest()
+(synchronized) void setFloorRequest(ElevatorEvent event)
+(synchronized) void removeElevator(int id)
+(synchronized) void addLog(String message)
+(synchronized) String receiveLog()
+setPassengersServiced(requests: int) throws RemoteException: void
+setMovesDone(requests: int) throws RemoteException: void
+setFirstRequest(time: String) throws RemoteException: void
+setLastRequest(time: String) throws RemoteException: void
+getPassengersServiced() throws RemoteException: int
+getMovesDone() throws RemoteException: int
+getFirstRequest() throws RemoteException: String
+getLastRequest() throws RemoteException: String
+(synchronized) getPassengerCounts(): }

class Idle implements ElevatorState {
}

ElevatorState <|.. Idle

class Moving implements ElevatorState {
}

class LoadingUnloading implements ElevatorState {
}

class Elevator implements Runnable {
+{static} TIME_PER_FLOOR: long {readOnly}
+{static} DOOR_OPERATION_TIME: long {readOnly}
+{static} ACK_LOOP_WAIT_TIME: int {readOnly}
+{static} BOARDING_TIME: int {readOnly}
-currentFloor: int
-elevatorId: int {readOnly}
-doorsOpen: boolean
-states: Map<String, ElevatorState> {readOnly}
-currentState: ElevatorState
-{static} serverPort: int {readOnly}
-sendReceiveSocket: DatagramSocket
-acknowledged: boolean
-MAX_ATTEMPTS: int {readOnly}
-direction: String
-destinationFloor: int
#transientFault: boolean
#hardFault: boolean

+Elevator(elevatorId: int)
+floorRequested(): void
+arrivedAtFloor(): void
+doorsClosed(): void
+getCurrentFloor(): int
+getDestinationFloor(): int
+getElevatorId(): int
+setCurrentState(nextState: String): void
-sendIExistMessage(): void
#waitMessageScheduler(): void
#sendLog(String message): void
#packetSentGetAck(message: String): void
#sendIdleStatusUpdate(): void
#sendMovingStatusUpdate(): void
+run(): void
#moveToFloor(floor: int) throws InterruptedException : void
#checkForIncomingMessages(): void
-checkFaultType(msg: String): void
#openDoors() throws InterruptedException: void
#closeDoors() throws InterruptedException : void
protected void boardPassengers() throws InterruptedException
+setOpenDoors(): void
+setCloseDoors(): void
+getDoorBoolean(): boolean
+getCurrentState(): String
 public boolean getTransientFault()
public boolean getHardFault()
+{Static} main(args:String[]): void
}

enum ELEVATOR_BUTTON {
UP
DOWN
INSIDE
START_MOVE
ARRIVAL
}

class ElevatorEvent implements Serializable{
-time: String {readOnly}
-sourceFloor: int {readOnly}
-destFloor: int {readOnly}
-button: ELEVATOR_BUTTON {readOnly}
-faultType: int{readOnly}
-lastReq: boolean{readOnly}

+ElevatorEvent(time: String, floor: int, button: ELEVATOR_BUTTON, car_button: int, fault: int, lastReq: boolean)
+toString(): String
+getTime(): String
+getSourceFloor(): int
+getDestFloor(): int
+getButton(): ELEVATOR_BUTTON
+getFaultType(): int
+isLastReq(): boolean
}

class Floor implements Runnable{
-prevTime: LocalTime
-curTime: LocalTime
-sendReceiveSocket: DatagramSocket {readOnly}
-sendPacket: DatagramPacket

+Floor()
+processFile(file: File): void
+processInput(input: String, lastLine: boolean): void
+run(): void
+{Static} main(args:String[]): void
}

class Scheduler implements Runnable{

-sendReceiveSocket: DatagramSocket
-floorRequestToBeProcessed: ElevatorEvent
-processedRequest:ElevatorEvent
-store: SchedulerStoreInt
-sourceFloors: Map<Integer, LinkedList<Integer>>
-destFloors: Map<Integer, LinkedList<Integer>>
-lastKnownDirection: Map<Integer, String>
-srcDestPairs: Map<Integer, Map<Integer, LinkedList<Integer>>>
-destErrorPairs: Map<Integer, Map<Integer, Integer>>
-elevatorPassengers: Map<Integer, Integer>
-maxPassengers: Map<Integer, Integer>
-totalRequestsDone: Map<Integer, Integer>
-int requestsDone: int
-int moveRequestsSent: int
receivedFirst: boolean
lastRequestReceived: boolean

+Scheduler(store: SchedulerStoreInt)
+run(): void
-removeOutOfOrderElevators() throws RemoteException: void
-readFloorRequest() throws RemoteException: void
-checkArrivedAtAnyFloor() throws RemoteException, InterruptedException: void
-checkAllElevatorsIdle() throws RemoteException: boolean
-doDestinations(sourceElevs: Map<Integer, ArrayList<Serializable>>, key: Integer, currFloor: int) throws RemoteException: void
-contains(list: LinkedList<Integer>, value: Integer): boolean
-createMessage(elevId: int, floor: int, fault: int) throws RemoteException: String
-sendCommand(elevId: int, floor: int, fault: int): void
-findNextClosest(floor: int, destfloors: LinkedList<Integer>, srcFloors: LinkedList<Integer>, direction: String): int
-sendToClosest(elevID: Integer) throws RemoteException: void
+findClosest(sourceFloor: int, destFloor: int, fault: int, elevatorNotBeingConsidered: int) throws RemoteException: void
+setReadFloorRequest(): void
+setProcessFloorRequest(): void
+getFloorRequestToBeProcessed(): ElevatorEvent
+getProcessedRequest(): ElevatorEvent
+{Static} main(args:String[]): void
}

class SchedulerReceiver implements Runnable{

-store: SchedulerStoreInt
-port: int {readOnly}

+SchedulerReceiver(store: SchedulerStoreInt)
+run(): void
+{Static} main(args:String[]): void
}

class HelperFunctions{
+{Static} generateMsg(stringMsg: String): byte[]
+{Static} translateMsg(msg: byte[], len: int): String
+{Static} validateData(msg: byte[], len: int): boolean
+{Static} printDataInfo(data: byte[], len: int): void
}

class CellPanel extends JPanel{
upLamp: JPanel
downLamp: JPanel
floorNumber: JPanel
floorNumberText: JTextArea
+CellPanel()
+upLampOff(): void
+downLampOn(): void
+downLampOff(): void
+setFloorNumber(text: String): void
}

class CustomCellRenderer extends DefaultTableCellRenderer{
-specialRow: int
-specialColumn: int
-color: Color
+CustomCellRenderer(specialRow: int, specialColumn: int, color: Color)
+getTableCellRendererComponent(table: JTable, value: Object, isSelected: boolean, hasFocus: boolean, row: int, column: int): Component
}

class ElevatorInspector extends JFrame implements Runnable{
-elevatorTable: JTable
-store: SchedulerStoreInt
layout: GridBagLayout
gbc: GridBagConstraints
elev1TextArea: JTextArea
elev2TextArea: JTextArea
elev3TextArea: JTextArea
elev4TextArea: JTextArea
SchedulerTextArea: JTextArea
elev1Pass: JTextField
elev2Pass: JTextField
elev3Pass: JTextField
elev4Pass: JTextField
requestsDone: JTextField
firstRequest: JTextField
lastRequest: JTextField
totalMoves: JTextField
+ElevatorInspector(store: SchedulerStoreInt)
+run(): void
-setTableVal(col: int, val: String): void
-updateFloorLamps(): void
-getMessages(): void
+updateElevatorLog(elevatorId: int, message: String): void
+updateSchedulerLog(message: String): void
+printALlElevators(message: String): void
+moveElevatorGUI(elevatorId: int, floor: int, error: int): void
+destinationColor(elevatorId: int, destination: int): void
+addObject(component: Component, parentContainer: Container, gridx: int, gridy: int, gridwidth: int, gridheight: int, weightx: double, weighty: double): void
+{static} main(args: String[]): void
}

class SplitTableCellRenderer implements TableCellRenderer{
CellPanel rendererPanel
+SplitTableCellRenderer()
+getTableCellRendererComponent(table: JTable, value: Object, isSelected: boolean, hasFocus: boolean, row: int, column: int): Component
}
@enduml